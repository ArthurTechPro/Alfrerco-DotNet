/* 
 * Alfresco Content Services REST API
 *
 * **Authentication API**  Provides access to the authentication features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Arkivujo.Alfresco.Authentication.Client.SwaggerDateConverter;

namespace Arkivujo.Alfresco.Authentication.Model
{
    /// <summary>
    /// TicketEntry
    /// </summary>
    [DataContract]
    public partial class TicketEntry :  IEquatable<TicketEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TicketEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketEntry" /> class.
        /// </summary>
        /// <param name="entry">entry (required).</param>
        public TicketEntry(Ticket entry = default(Ticket))
        {
            // to ensure "entry" is required (not null)
            if (entry == null)
            {
                throw new InvalidDataException("entry is a required property for TicketEntry and cannot be null");
            }
            else
            {
                this.Entry = entry;
            }
        }
        
        /// <summary>
        /// Gets or Sets Entry
        /// </summary>
        [DataMember(Name="entry", EmitDefaultValue=false)]
        public Ticket Entry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TicketEntry {\n");
            sb.Append("  Entry: ").Append(Entry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TicketEntry);
        }

        /// <summary>
        /// Returns true if TicketEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of TicketEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TicketEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Entry == input.Entry ||
                    (this.Entry != null &&
                    this.Entry.Equals(input.Entry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Entry != null)
                    hashCode = hashCode * 59 + this.Entry.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
