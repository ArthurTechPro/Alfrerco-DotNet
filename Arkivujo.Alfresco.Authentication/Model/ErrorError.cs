/* 
 * Alfresco Content Services REST API
 *
 * **Authentication API**  Provides access to the authentication features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Arkivujo.Alfresco.Authentication.Client.SwaggerDateConverter;

namespace Arkivujo.Alfresco.Authentication.Model
{
    /// <summary>
    /// ErrorError
    /// </summary>
    [DataContract]
    public partial class ErrorError :  IEquatable<ErrorError>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ErrorError() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorError" /> class.
        /// </summary>
        /// <param name="errorKey">errorKey.</param>
        /// <param name="statusCode">statusCode (required).</param>
        /// <param name="briefSummary">briefSummary (required).</param>
        /// <param name="stackTrace">stackTrace (required).</param>
        /// <param name="descriptionURL">descriptionURL (required).</param>
        /// <param name="logId">logId.</param>
        public ErrorError(string errorKey = default(string), int? statusCode = default(int?), string briefSummary = default(string), string stackTrace = default(string), string descriptionURL = default(string), string logId = default(string))
        {
            // to ensure "statusCode" is required (not null)
            if (statusCode == null)
            {
                throw new InvalidDataException("statusCode is a required property for ErrorError and cannot be null");
            }
            else
            {
                this.StatusCode = statusCode;
            }
            // to ensure "briefSummary" is required (not null)
            if (briefSummary == null)
            {
                throw new InvalidDataException("briefSummary is a required property for ErrorError and cannot be null");
            }
            else
            {
                this.BriefSummary = briefSummary;
            }
            // to ensure "stackTrace" is required (not null)
            if (stackTrace == null)
            {
                throw new InvalidDataException("stackTrace is a required property for ErrorError and cannot be null");
            }
            else
            {
                this.StackTrace = stackTrace;
            }
            // to ensure "descriptionURL" is required (not null)
            if (descriptionURL == null)
            {
                throw new InvalidDataException("descriptionURL is a required property for ErrorError and cannot be null");
            }
            else
            {
                this.DescriptionURL = descriptionURL;
            }
            this.ErrorKey = errorKey;
            this.LogId = logId;
        }
        
        /// <summary>
        /// Gets or Sets ErrorKey
        /// </summary>
        [DataMember(Name="errorKey", EmitDefaultValue=false)]
        public string ErrorKey { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets BriefSummary
        /// </summary>
        [DataMember(Name="briefSummary", EmitDefaultValue=false)]
        public string BriefSummary { get; set; }

        /// <summary>
        /// Gets or Sets StackTrace
        /// </summary>
        [DataMember(Name="stackTrace", EmitDefaultValue=false)]
        public string StackTrace { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionURL
        /// </summary>
        [DataMember(Name="descriptionURL", EmitDefaultValue=false)]
        public string DescriptionURL { get; set; }

        /// <summary>
        /// Gets or Sets LogId
        /// </summary>
        [DataMember(Name="logId", EmitDefaultValue=false)]
        public string LogId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorError {\n");
            sb.Append("  ErrorKey: ").Append(ErrorKey).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  BriefSummary: ").Append(BriefSummary).Append("\n");
            sb.Append("  StackTrace: ").Append(StackTrace).Append("\n");
            sb.Append("  DescriptionURL: ").Append(DescriptionURL).Append("\n");
            sb.Append("  LogId: ").Append(LogId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErrorError);
        }

        /// <summary>
        /// Returns true if ErrorError instances are equal
        /// </summary>
        /// <param name="input">Instance of ErrorError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorError input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ErrorKey == input.ErrorKey ||
                    (this.ErrorKey != null &&
                    this.ErrorKey.Equals(input.ErrorKey))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.BriefSummary == input.BriefSummary ||
                    (this.BriefSummary != null &&
                    this.BriefSummary.Equals(input.BriefSummary))
                ) && 
                (
                    this.StackTrace == input.StackTrace ||
                    (this.StackTrace != null &&
                    this.StackTrace.Equals(input.StackTrace))
                ) && 
                (
                    this.DescriptionURL == input.DescriptionURL ||
                    (this.DescriptionURL != null &&
                    this.DescriptionURL.Equals(input.DescriptionURL))
                ) && 
                (
                    this.LogId == input.LogId ||
                    (this.LogId != null &&
                    this.LogId.Equals(input.LogId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorKey != null)
                    hashCode = hashCode * 59 + this.ErrorKey.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.BriefSummary != null)
                    hashCode = hashCode * 59 + this.BriefSummary.GetHashCode();
                if (this.StackTrace != null)
                    hashCode = hashCode * 59 + this.StackTrace.GetHashCode();
                if (this.DescriptionURL != null)
                    hashCode = hashCode * 59 + this.DescriptionURL.GetHashCode();
                if (this.LogId != null)
                    hashCode = hashCode * 59 + this.LogId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
