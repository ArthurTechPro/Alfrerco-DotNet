/* 
 * Alfresco Content Services REST API
 *
 * **Authentication API**  Provides access to the authentication features of Alfresco Content Services. 
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Arkivujo.Alfresco.Authentication.Client;
using Arkivujo.Alfresco.Authentication.Model;

namespace Arkivujo.Alfresco.Authentication.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create ticket (login)
        /// </summary>
        /// <remarks>
        /// **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Logs in and returns the new authentication ticket.  The userId and password properties are mandatory in the request body. For example: &#x60;&#x60;&#x60;JSON {     \&quot;userId\&quot;: \&quot;jbloggs\&quot;,     \&quot;password\&quot;: \&quot;password\&quot; } &#x60;&#x60;&#x60; To use the ticket in future requests you should pass it in the request header. For example using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketBodyCreate">The user credential.</param>
        /// <returns>TicketEntry</returns>
        TicketEntry CreateTicket (TicketBody ticketBodyCreate);

        /// <summary>
        /// Create ticket (login)
        /// </summary>
        /// <remarks>
        /// **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Logs in and returns the new authentication ticket.  The userId and password properties are mandatory in the request body. For example: &#x60;&#x60;&#x60;JSON {     \&quot;userId\&quot;: \&quot;jbloggs\&quot;,     \&quot;password\&quot;: \&quot;password\&quot; } &#x60;&#x60;&#x60; To use the ticket in future requests you should pass it in the request header. For example using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketBodyCreate">The user credential.</param>
        /// <returns>ApiResponse of TicketEntry</returns>
        ApiResponse<TicketEntry> CreateTicketWithHttpInfo (TicketBody ticketBodyCreate);
        /// <summary>
        /// Delete ticket (logout)
        /// </summary>
        /// <remarks>
        /// **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes logged in ticket (logout). 
        /// </remarks>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteTicket ();

        /// <summary>
        /// Delete ticket (logout)
        /// </summary>
        /// <remarks>
        /// **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes logged in ticket (logout). 
        /// </remarks>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTicketWithHttpInfo ();
        /// <summary>
        /// Validate ticket
        /// </summary>
        /// <remarks>
        /// **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Validates the specified ticket (derived from Authorization header) is still valid.  For example, you can pass the Authorization request header using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ValidTicketEntry</returns>
        ValidTicketEntry ValidateTicket ();

        /// <summary>
        /// Validate ticket
        /// </summary>
        /// <remarks>
        /// **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Validates the specified ticket (derived from Authorization header) is still valid.  For example, you can pass the Authorization request header using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ValidTicketEntry</returns>
        ApiResponse<ValidTicketEntry> ValidateTicketWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create ticket (login)
        /// </summary>
        /// <remarks>
        /// **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Logs in and returns the new authentication ticket.  The userId and password properties are mandatory in the request body. For example: &#x60;&#x60;&#x60;JSON {     \&quot;userId\&quot;: \&quot;jbloggs\&quot;,     \&quot;password\&quot;: \&quot;password\&quot; } &#x60;&#x60;&#x60; To use the ticket in future requests you should pass it in the request header. For example using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketBodyCreate">The user credential.</param>
        /// <returns>Task of TicketEntry</returns>
        System.Threading.Tasks.Task<TicketEntry> CreateTicketAsync (TicketBody ticketBodyCreate);

        /// <summary>
        /// Create ticket (login)
        /// </summary>
        /// <remarks>
        /// **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Logs in and returns the new authentication ticket.  The userId and password properties are mandatory in the request body. For example: &#x60;&#x60;&#x60;JSON {     \&quot;userId\&quot;: \&quot;jbloggs\&quot;,     \&quot;password\&quot;: \&quot;password\&quot; } &#x60;&#x60;&#x60; To use the ticket in future requests you should pass it in the request header. For example using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketBodyCreate">The user credential.</param>
        /// <returns>Task of ApiResponse (TicketEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<TicketEntry>> CreateTicketAsyncWithHttpInfo (TicketBody ticketBodyCreate);
        /// <summary>
        /// Delete ticket (logout)
        /// </summary>
        /// <remarks>
        /// **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes logged in ticket (logout). 
        /// </remarks>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTicketAsync ();

        /// <summary>
        /// Delete ticket (logout)
        /// </summary>
        /// <remarks>
        /// **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes logged in ticket (logout). 
        /// </remarks>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTicketAsyncWithHttpInfo ();
        /// <summary>
        /// Validate ticket
        /// </summary>
        /// <remarks>
        /// **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Validates the specified ticket (derived from Authorization header) is still valid.  For example, you can pass the Authorization request header using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ValidTicketEntry</returns>
        System.Threading.Tasks.Task<ValidTicketEntry> ValidateTicketAsync ();

        /// <summary>
        /// Validate ticket
        /// </summary>
        /// <remarks>
        /// **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Validates the specified ticket (derived from Authorization header) is still valid.  For example, you can pass the Authorization request header using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ValidTicketEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidTicketEntry>> ValidateTicketAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private Arkivujo.Alfresco.Authentication.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.Configuration = new Arkivujo.Alfresco.Authentication.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Arkivujo.Alfresco.Authentication.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(Arkivujo.Alfresco.Authentication.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Arkivujo.Alfresco.Authentication.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Arkivujo.Alfresco.Authentication.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Arkivujo.Alfresco.Authentication.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Arkivujo.Alfresco.Authentication.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create ticket (login) **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Logs in and returns the new authentication ticket.  The userId and password properties are mandatory in the request body. For example: &#x60;&#x60;&#x60;JSON {     \&quot;userId\&quot;: \&quot;jbloggs\&quot;,     \&quot;password\&quot;: \&quot;password\&quot; } &#x60;&#x60;&#x60; To use the ticket in future requests you should pass it in the request header. For example using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketBodyCreate">The user credential.</param>
        /// <returns>TicketEntry</returns>
        public TicketEntry CreateTicket (TicketBody ticketBodyCreate)
        {
             ApiResponse<TicketEntry> localVarResponse = CreateTicketWithHttpInfo(ticketBodyCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create ticket (login) **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Logs in and returns the new authentication ticket.  The userId and password properties are mandatory in the request body. For example: &#x60;&#x60;&#x60;JSON {     \&quot;userId\&quot;: \&quot;jbloggs\&quot;,     \&quot;password\&quot;: \&quot;password\&quot; } &#x60;&#x60;&#x60; To use the ticket in future requests you should pass it in the request header. For example using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketBodyCreate">The user credential.</param>
        /// <returns>ApiResponse of TicketEntry</returns>
        public ApiResponse< TicketEntry > CreateTicketWithHttpInfo (TicketBody ticketBodyCreate)
        {
            // verify the required parameter 'ticketBodyCreate' is set
            if (ticketBodyCreate == null)
                throw new ApiException(400, "Missing required parameter 'ticketBodyCreate' when calling AuthenticationApi->CreateTicket");

            var localVarPath = "/tickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketBodyCreate != null && ticketBodyCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ticketBodyCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ticketBodyCreate; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketEntry)));
        }

        /// <summary>
        /// Create ticket (login) **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Logs in and returns the new authentication ticket.  The userId and password properties are mandatory in the request body. For example: &#x60;&#x60;&#x60;JSON {     \&quot;userId\&quot;: \&quot;jbloggs\&quot;,     \&quot;password\&quot;: \&quot;password\&quot; } &#x60;&#x60;&#x60; To use the ticket in future requests you should pass it in the request header. For example using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketBodyCreate">The user credential.</param>
        /// <returns>Task of TicketEntry</returns>
        public async System.Threading.Tasks.Task<TicketEntry> CreateTicketAsync (TicketBody ticketBodyCreate)
        {
             ApiResponse<TicketEntry> localVarResponse = await CreateTicketAsyncWithHttpInfo(ticketBodyCreate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create ticket (login) **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Logs in and returns the new authentication ticket.  The userId and password properties are mandatory in the request body. For example: &#x60;&#x60;&#x60;JSON {     \&quot;userId\&quot;: \&quot;jbloggs\&quot;,     \&quot;password\&quot;: \&quot;password\&quot; } &#x60;&#x60;&#x60; To use the ticket in future requests you should pass it in the request header. For example using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ticketBodyCreate">The user credential.</param>
        /// <returns>Task of ApiResponse (TicketEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TicketEntry>> CreateTicketAsyncWithHttpInfo (TicketBody ticketBodyCreate)
        {
            // verify the required parameter 'ticketBodyCreate' is set
            if (ticketBodyCreate == null)
                throw new ApiException(400, "Missing required parameter 'ticketBodyCreate' when calling AuthenticationApi->CreateTicket");

            var localVarPath = "/tickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ticketBodyCreate != null && ticketBodyCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ticketBodyCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ticketBodyCreate; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TicketEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TicketEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TicketEntry)));
        }

        /// <summary>
        /// Delete ticket (logout) **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes logged in ticket (logout). 
        /// </summary>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteTicket ()
        {
             DeleteTicketWithHttpInfo();
        }

        /// <summary>
        /// Delete ticket (logout) **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes logged in ticket (logout). 
        /// </summary>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTicketWithHttpInfo ()
        {

            var localVarPath = "/tickets/-me-";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete ticket (logout) **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes logged in ticket (logout). 
        /// </summary>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTicketAsync ()
        {
             await DeleteTicketAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete ticket (logout) **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes logged in ticket (logout). 
        /// </summary>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTicketAsyncWithHttpInfo ()
        {

            var localVarPath = "/tickets/-me-";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Validate ticket **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Validates the specified ticket (derived from Authorization header) is still valid.  For example, you can pass the Authorization request header using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ValidTicketEntry</returns>
        public ValidTicketEntry ValidateTicket ()
        {
             ApiResponse<ValidTicketEntry> localVarResponse = ValidateTicketWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate ticket **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Validates the specified ticket (derived from Authorization header) is still valid.  For example, you can pass the Authorization request header using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ValidTicketEntry</returns>
        public ApiResponse< ValidTicketEntry > ValidateTicketWithHttpInfo ()
        {

            var localVarPath = "/tickets/-me-";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidTicketEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidTicketEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidTicketEntry)));
        }

        /// <summary>
        /// Validate ticket **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Validates the specified ticket (derived from Authorization header) is still valid.  For example, you can pass the Authorization request header using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ValidTicketEntry</returns>
        public async System.Threading.Tasks.Task<ValidTicketEntry> ValidateTicketAsync ()
        {
             ApiResponse<ValidTicketEntry> localVarResponse = await ValidateTicketAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate ticket **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Validates the specified ticket (derived from Authorization header) is still valid.  For example, you can pass the Authorization request header using Javascript:   &#x60;&#x60;&#x60;Javascript     request.setRequestHeader (\&quot;Authorization\&quot;, \&quot;Basic \&quot; + btoa(ticket));   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Arkivujo.Alfresco.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ValidTicketEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidTicketEntry>> ValidateTicketAsyncWithHttpInfo ()
        {

            var localVarPath = "/tickets/-me-";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidTicketEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ValidTicketEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidTicketEntry)));
        }

    }
}
